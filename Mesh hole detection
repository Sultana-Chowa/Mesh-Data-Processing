import os
import open3d as o3d
import numpy as np
from scipy.spatial import cKDTree
import pandas as pd

ply_dir = '/content/drive/MyDrive//Malignant PC'
ply_files = [f for f in os.listdir(ply_dir) if f.endswith('.ply')]
results_df = pd.DataFrame(columns=['File Name', 'Percentage Exposed'])

for ply_file in ply_files:
    mesh = o3d.io.read_triangle_mesh(os.path.join(ply_dir, ply_file))
    mesh.compute_vertex_normals()

    mesh_as_point_cloud = o3d.geometry.PointCloud()
    mesh_as_point_cloud.points = o3d.utility.Vector3dVector(np.asarray(mesh.vertices))

    mesh_as_point_cloud.estimate_normals(search_param=o3d.geometry.KDTreeSearchParamHybrid(radius=0.1, max_nn=30
    poisson_mesh, densities = o3d.geometry.TriangleMesh.create_from_point_cloud_poisson(
        mesh_as_point_cloud, depth=9
    )
    object_surface_points = np.asarray(poisson_mesh.vertices)

    mesh_vertices = np.asarray(mesh.vertices)
    object_kdtree = cKDTree(object_surface_points)

    distances = np.zeros(len(mesh_vertices))
    for i, vertex in enumerate(mesh_vertices):
        _, nearest_index = object_kdtree.query(vertex)
        distances[i] = np.linalg.norm(vertex - object_surface_points[nearest_index])

    average_distance = np.mean(distances)
    threshold = 3 * average_distance
    exposed_vertices = [i for i, distance in enumerate(distances) if distance > threshold]
    percentage_exposed = (len(exposed_vertices) / len(mesh_vertices)) * 100
    results_df = results_df.append({'File Name': ply_file, 'Percentage Exposed': percentage_exposed}, ignore_index=True)

# Save the dataframe to a CSV file
results_df.to_csv('pc_mesh_hole.csv', index=False)
results_df
